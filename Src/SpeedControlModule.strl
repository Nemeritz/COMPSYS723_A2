module SpeedControlFSM:

input CruiseState : integer;
output ResetPID;

% encoding of the states of an FSM performing control
% state 1 = off, state 2 = on, state 3 = standby and state 4 = disabled
% Note the use of pre on request input to enable composition with request resolver
% initial condition
loop
trap T1 in
% Note the use of pre for achieving causal composition between the two modules
var state := 1 : integer in
loop
    trap T2 in 
	pause;
	    %no speed control management	
            if state = 1 then
                if ?CruiseState = 2 then
			state := 2;
			emit ResetPID;
			exit T2;
		end if;
            end if;
            %speed control management
            if state = 2 then
		if not (?CruiseState = 2) then
			state := 1;
			exit T2;
		end if;
            end if;
     end trap
end loop
end var
end trap
end loop
end module

% NEW MODULE
module cruiseregulation:
function  regulateThrottle(integer, float, float) : float;

input ResetPID;
input CruiseSpeed : float;
input Speed : float;

output ThrottleCmd : float;

loop
trap T1 in
loop
    trap T2 in 
	pause;
		present ResetPID then
			emit ThrottleCmd(regulateThrottle(0, ?CruiseSpeed, ?Speed));
		else
			emit ThrottleCmd(regulateThrottle(1, ?CruiseSpeed, ?Speed));
		end present;
     end trap
end loop
end trap
end loop
end module

%TOP
module SpeedControlModule:

input CruiseState : integer;
input CruiseSpeed : float;
input Speed : float;
output ThrottleCmd : float;

signal ResetPID

in

run cruiseregulation

||

run SpeedControlFSM

end signal
end module
