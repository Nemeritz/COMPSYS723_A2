module SpeedControlFSM:

input CruiseState : integer;
output ResetPID, UseAuto;

loop
trap T1 in
%
var state := 1 : integer in
loop
    trap T2 in 
	pause;
	    %no speed control management	
            if state = 1 then
                if ?CruiseState = 2 then
			state := 2;
			emit ResetPID;
			emit UseAuto;
			exit T2;
		end if;
            end if;
            %speed control management
            if state = 2 then
		if not (?CruiseState = 2) then
			state := 1;
			exit T2;
		end if;
		emit UseAuto;
            end if;
     end trap
end loop
end var
end trap
end loop
end module

% NEW MODULE
module cruiseregulation:
function  regulateThrottle(integer, float, float) : float;

input ResetPID, BrakePressed, AccelPressed, UseAuto;

input Accel : float;
input Brake : float;
input CruiseSpeed : float;
input Speed : float;

output ThrottleCmd : float;

var ThrottleTemp := 0.0f : float in

loop
trap T1 in
loop
    trap T2 in 
	pause;
		present ResetPID then
			ThrottleTemp := regulateThrottle(1, ?CruiseSpeed, ?Speed);
		else
			ThrottleTemp := regulateThrottle(0, ?CruiseSpeed, ?Speed);
		end present;

		present not UseAuto then
			present AccelPressed then
				ThrottleTemp := ?Accel;
			end present;
			
			present BrakePressed then
				ThrottleTemp := 0.0f;
			end present;
		end present;
		emit ThrottleCmd(ThrottleTemp);
     end trap
end loop
end trap
end loop
end var
end module

%TOP
module SpeedControlModule:

input AccelPressed, BrakePressed;

input Accel : float;
input Brake : float;
input CruiseState : integer;
input CruiseSpeed : float;
input Speed : float;
output ThrottleCmd : float;

signal ResetPID, UseAuto

in

run cruiseregulation

||

run SpeedControlFSM

end signal
end module
