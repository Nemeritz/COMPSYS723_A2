% >>> CRUISESTATECONTROLFSM_STRL

module CruiseStateControlFSM:

input AccelPressed;
input BrakePressed;
input Resume;
input Off;
input On;
output CruiseState := 1 : integer;

input SpeedBetweenLimits;

var state := 1 : integer in
loop
    trap T2 in
	pause;
		% Cruise control is off
		if state = 1 then
			present (On and SpeedBetweenLimits) then
				state := 2;
				emit CruiseState(state);
				exit T2;
			end present;
			emit CruiseState(state);
            end if;
		% Cruise control is on
		if state = 2 then
			present Off then
				state := 1;
				emit CruiseState(state);
				exit T2;
			end present;
			present BrakePressed then
				state := 3;
				emit CruiseState(state);
				exit T2;
			end present;
			present (AccelPressed or (not SpeedBetweenLimits)) then
				state := 4;
				emit CruiseState(state);
				exit T2;
			end present;
			emit CruiseState(state);
		end if;
		% Cruise Control Standby
		if state = 3 then
			present Off then
				state := 1;
				emit CruiseState(state);
				exit T2;
			end present;
			present Resume and ((not AccelPressed) and SpeedBetweenLimits) then
				state := 2;
				emit CruiseState(state);
				exit T2;
			end present;
			present (Resume and ((not SpeedBetweenLimits) or AccelPressed)) then
				state := 4;
				emit CruiseState(state);
				exit T2;
			end present;
			emit CruiseState(state);
				end if;
		% Cruise Control Disabled
		if state = 4 then
			present Off then
				state := 1;
				emit CruiseState(state);
				exit T2;
			end present;
			present BrakePressed then
				state := 3;
				emit CruiseState(state);
				exit T2;
			end present;
			present (SpeedBetweenLimits and (not AccelPressed)) then
				state := 2;
				emit CruiseState(state);
				exit T2;
			end present;
			emit CruiseState(state);
		end if;
     end trap
end loop
end var

end module

% >>> CRUISESTATECONTROLFSM_STRL_END
