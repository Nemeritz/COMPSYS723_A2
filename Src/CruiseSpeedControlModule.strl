%NEW MODULE
module CruiseSpeedManage:

input QuickAccel;
input QuickDecel;
input SetSpeed;
input Speed : float;
output CruiseSpeed := 30.0f : float;
constant SpeedInc = 2.5f : float; 
constant SpeedMax = 150.0f : float;
constant SpeedMin = 30.0f : float;

var temp := 0.0f : float in
loop
	temp := pre(?CruiseSpeed);
	present (QuickAccel) then
		if (pre(?CruiseSpeed) + SpeedInc) < SpeedMax then
			temp := temp + SpeedInc;
		end if;
	end present;

	present (QuickDecel) then
		if (pre(?CruiseSpeed) - SpeedInc) > SpeedMin then
			temp := temp - SpeedInc;
		end if;
	end present;

	present (QuickDecel and QuickAccel) then
			temp := pre(?CruiseSpeed);
	end present;

	present (SetSpeed) then
		if ?Speed < SpeedMax and ?Speed > SpeedMin then
			temp := ?Speed;
		end if;
	end present;
	emit CruiseSpeed(temp);
each tick;
end var;
end module

%NEW MODULE
% This module controls the operation of the motors and is responsible for
% Controlling the states of the cruise control
% It essentially encodes an FSM
% See design document for FSM details
module CruiseSpeedControlFSM:

input CruiseState : integer;
input Set;
input QuickAccel;
input QuickDecel;
output SetSpeed;
output AccelSpeed;
output DecelSpeed;
output CruiseSpeedManage;

% encoding of the states of an FSM performing control
% state 1 = off, state 2 = on, state 3 = standby and state 4 = disabled
% Note the use of pre on request input to enable composition with request resolver
% initial condition
loop
trap T1 in
% Note the use of pre for achieving causal composition between the two modules
var state := 1 : integer in
loop
    trap T2 in
	pause;
	    %no Cruise speed adjustment
            if state = 1 then
                if not (?CruiseState = 1)  then
			state := 2;
			emit CruiseSpeedManage;
			exit T2;
		end if;
            end if;
            %Cruise speed adjustment
            if state = 2 then
		if ?CruiseState = 1 then
			state := 1;
			exit T2;
		end if;
		present QuickAccel then
			emit AccelSpeed;
		end present;
		present QuickDecel then
			emit DecelSpeed;
		end present;
		present Set then
			emit SetSpeed;
		end present;
		emit CruiseSpeedManage;
            end if;
     end trap
end loop
end var
end trap
end loop

end module

%TOP MODULE
module CruiseSpeedControlModule:


input Set;
input QuickAccel;
input QuickDecel;
input CruiseState : integer;
input Speed : float;
output CruiseSpeed := 40.0f : float;
output CruiseSpeedManage;

signal SetSpeed, DecelSpeed, AccelSpeed
in

run CruiseSpeedControlFSM

||

run CruiseSpeedManage

end signal
end module


